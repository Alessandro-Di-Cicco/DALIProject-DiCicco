/* This version of the deliver procedure should find the most suitable driver and warehouse pair
to generate the shortest possible delivery path
but, for some reason, it doesn't work, as it raises an indecipherable "end of file inside quotes" error.
I could not figure out what causes it */
/*
make_delivery(Destination, Resource, Quantity):-
    format('Delivery computation~n', []),
    findall(
        [TotalDistance, Driver, Warehouse],
        (
            available_driver_at(Driver, DriverLocation),
            find_warehouse(Resource, Quantity, Warehouse),
            shortest_path(DriverLocation, Warehouse, Distance1),
            shortest_path(Warehouse, Destination, Distance2),
            TotalDistance is Distance1 + Distance2
        ),
        Paths
    ),
    format('Found paths ~w~n', [Paths]),
    min_member([MinDistance, SelectedDriver, SelectedWarehouse], Paths),
    format('selected ~w going to ~w for a distance of ~w~n', [SelectedDriver, SelectedWarehouse, MinDistance]).
*/



/* TODO: this was the previous method that didn't use shortest path, remove it */
/*
assign_delivery(Driver, Location, Resource, Quantity):- 
        messageA(Driver, send_message(new_delivery(Location, Resource, Quantity), Me)).
*/

/*
make_delivery(Destination, Resource, Quantity):- format('Hey there cowboy ~w ~w ~w~n', [Destination, Resource, Quantity]).

make_delivery(Location, Resource, Quantity),
*/

:-dynamic phase/1.
:-dynamic is_ready/1.
:-dynamic request/1.
:-dynamic refills/1.


phase(init).

phaseI(Any):> 
    format('Check on coordinator~n', []),
    messageA(coordinator, send_message(start_check(Me), Me)).

coord_readyE:>
    assert(is_ready(yes)),
    retract(phase(init)),
    format('Coordinator is ready~n', []).

    random(1, 4, RandNum),
    assert(request(RandNum)).


/* Utility procedures to sleep for a random period and to 
fetch a random element from a list */
pause:-
    random(1, 5, Len),
    sleep(Len).

random_element(List, Element):-
    length(List, Length),
    random(1, Length + 1, Index),
    nth1(Index, List, Element).
/* ------------------------------------------------------*/


